この特集では、仕事で使うエクセルやCSVファイルをプログラムから操作する方法を見て行きましょう。
業務で色々なファイルを使っているうちに、
多くのエクセルファイルやCSVファイルから目的のデータが記載されたファイルを探したいといったことや
複数エクセルファイルに記載されたデータを集計したいといった場合が出てきます。
このような場合にプログラムから様々なファイルを処理できると非常に便利です。

プログラミング言語はJavaとRubyを利用します。といっても、あまり言語の難しい機能は使いません。
コード例も1つずつ説明していきますので、一緒にみていきましょう。


プログラムからエクセルファイルやCSVファイルなどを操作するには注意点があります。
操作するファイルがテキストファイルであるかどうかというのがポイントです。
テキストファイルとは、メモ帳などで開いて編集できる普通のファイルを指します。
CSVはテキストファイルに当たります。
これに対して、エクセルなどの専用のソフトでないと編集できないファイルをバイナリファイルと呼びます。
バイナリファイルをプログラムから扱うには専用のツールが必要になります。
といっても、RubyやあるいはJavaのようなメジャーな言語では
エクセルなどを操作できるツールが無償で提供されています。この特集でも
そのようなツールを利用します。
また、CSVのようなテキストファイルであっても、処理の簡単さから、専用のツールを利用します。


まずはテキストファイルであるCSVを操作する方法から見て行きましょう。
CSVとは

日,項目,金額
9/1,食費,1020
9/1,交通費,700
9/2,食費,1250

というように、カンマ区切りでデータを並べる形式のことを指します。
CSVはテキストファイルなので、Ruby標準のファイル操作機能でも操作可能です。
ただし、すぐ後で述べますが、少し危険な操作にもなります。
ここではファイルの基本的な操作をみるために、紹介します。

open("money.csv") do |f|
  f.each_line do |line|
    p line.split(",")[0]
  end
end

とすれば、CSVファイルの中身を読み出すことができます。
このコードではまず「money.csv」という名前のCSVファイルを開いています。
そしてその開いたファイルオブジェクトをfという変数にいれて操作しています。
2行目では開いたファイルfに対して、1行ずつ読み込む処理をしています。
読みこんだ1行のデータをlineという変数に格納しています。
そして、そのlineに対して「line.split(",")[0]」としています。
split(",")というのは、lineの文字列をカンマで切り分けて配列にしてくださいというメソッドになります。
そして切り分けた配列の最初の項目を取得してます。
また p はコンソールに出力するためのメソッドです。というわけでこのメソッドは

日
9/1
9/1
9/2

という出力になります。
このようにCSVを普通に開いて、カンマで分割して処理するということも可能ではあります。
ただし、これはあまりオススメできません。というのも、上記の処理では単純にカンマを区切り文字とみなしていますが
文字列中にはエスケープされたカンマも存在する可能性があるためです。上記のような処理ではエスケープされたカンマには対応できません。
というわけで、ここはやはりちゃんとエスケープも考慮されたCSV処理ツールを利用しましょう。

実はRubyにはCSVを処理するための機能が最初から入っています。CSVというそのままなクラスで操作できます。
先ほど同じ操作を行うには以下のようなコードになります。

require 'csv'
CSV.foreach("money.csv") do |line|
  p line[0]
end

最初の「require 'csv'」はCSVを使うようにするためにcsvライブラリを読み込んでいます。
そしてCSVクラスを通してmoney.csvを読み込み、1行のデータをlineに入れています。
lineはすでにカンマで分割された配列となってやってきます。
なんだかとても簡単ですね！
さらにこのCSVは便利な機能があります。
money.csvは1行目が特別な行になっていますね。あとの行の項目の意味を決めている行になります。
これはCSVでは必須の行というわけではないのですが多くのCSVがこのような形式になっています。このため1行目だけを特別扱いする機能がCSVには入っています。
さらに、上記の単純な読み込みではすべての項目が文字列として認識されますが
金額の数値は文字列ではなく数値として扱ってほしいですね。こういう機能もCSVに入っています。
それらを使ったコードが以下です。

require 'csv'
CSV.foreach("money.csv",:headers=>true, :converters => :numeric) do |line|
  p line
end

「headers=>true, :converters => :numeric」という新しい設定が増えましたね。これは1行目がヘッダー行であることと数値に変換できる項目は
数値に変換してくださいという設定です。これでCSVファイルを開いて、処理した行ごとにみると

#<CSV::Row "日":"9/1" "項目":"食費" "金額":1020>
#<CSV::Row "日":"9/1" "項目":"交通費" "金額":700>
#<CSV::Row "日":"9/2" "項目":"食費" "金額":1250>

という出力になります。3行のデータ行があるので3行出力さています。ここで注目して欲しいのは1行目のヘッダー情報が各項目に設定されていることです。
これは便利ですね。各項目のデータを取り出すには

line[0]
や
line["日"]
というようにすれば取得できます。
また、金額が数値として扱われています。

次にJavaの方法をみていきましょう。Rubyと違ってJavaにはCSVを扱う標準的なライブラリは存在しません。
そこで外部ライブラリを利用することになりますが、いくつかあります。
代表的なものはOpen CSVやSuper CSVでしょう。ここではSuper CSVをつかってみましょう。http://supercsv.sourceforge.net/
なかなか高機能ですが、Rubyと似たようなことをやってみましょう。


ICsvListReader listReader = null;
try {
        listReader = new CsvListReader(new FileReader("money.csv"), CsvPreference.STANDARD_PREFERENCE);
        
        String[] header = listReader.getHeader(true);
        System.out.println(header[0]);
		
        CellProcessor[] processors = new CellProcessor[] { 
                new ParseDate("MM/dd"), 
                new NotNull(), 
                new Optional(new ParseInt()) 
        };
        
        List<Object> list;
        while( (list = listReader.read(processors)) != null ) {
                System.out.println(list);
        }
}
finally {
        if( listReader != null ) {
                listReader.close();
        }
}

まずCsvListReaderというクラスをnew しています。そしてヘッダー部分を読みだしています。
ここではヘッダーはStringの配列として返されていますね。そして、その次には各項目の設定を行っています。
processorsの部分です。最初の項目は日付なので、日付を解釈できるようにParseDateオブジェクトを設定し、次にNotNull、
そして最後の new Optional(new ParseInt())は値が存在する場合は数値に変換してくれる設定です。
これはRubyよりも便利ですね。あとは順番にデータを読み出しているだけです。
ただし、ヘッダーを読みだしたあと改行コードがLFだと、２行目の行を読み飛ばしてしまうようです。注意してください。

ちなみにSuper CSVは他にも1行をJavaのオブジェクトに変えてくれる機能やMapにしてくれる機能もあります。
かなり便利なライブラリですね。


次にエクセルファイルの扱いを見て行きましょう。
エクセルファイルのファイルの操作には様々な方法があります。大きく分類すると

1.WindowsのAPIを叩く方法
2.エクセルファイルを解析する方法
3.エクセルファイルからテキストファイルに変換して操作する方法

1の方法は、Windowsが提供しているプログラマ向けのAPIを利用してエクセルを操作する方法です。
WindowsAPIを通してエクセルを操作する、つまりは実際にエクセルを起動してエクセルと通信しながら操作する方法で、もっともリッチな操作が可能になります。
このためのライブラリとしてrubyにはwin32oleというライブラリが入っています。
これを使ってエクセルを操作するコードはこのような感じになります。

require 'win32ole'
xl = WIN32OLE.new('Excel.Application')
xl.Visible = false
fname = File.absolute_path("money.xlsx")
book = xl.Workbooks.Open(fname)

begin
  book.Worksheets.each do |sheet|
    sheet.UsedRange.Rows.each do |row|
	  row.Columns.each do |cell|
	    p cell.Value
	  end
	end
  end
ensure
  begin
    book.Close
  ensure
	xl.Quit
  end
end

このコードは全シートの全データを出力しています。CSVに比べると一気に複雑になった感じがしますね。
まず最初の行でwin32oleを読み込んでいます。そして、2行目でエクセルアプリを起動しています。
3行目の設定は、エクセルアプリを非表示にしています。この設定がないとプログラムで処理するエクセルが随時画面上に立ち上がってきてしまって
ちょっと面倒なので、非表示にしています。
エクセルでファイルを開くにはファイルの絶対パスが必要なので、絶対パスを取得して、エクセルファイルを開いています。
begin
ensure
end
というのはRubyの例外処理です。win32oleでエクセルを操作していると、メソッド名の書き間違いなどで途中でプログラムが落ちてしまうことがあります。
プログラムがこけた場合、エクセルを正しく終了させられずに、そのまま残ってしまうことがあります。
こうならないように例外処理を行っています。例外処理ではbeginからensure内で通常の処理を行って、その処理中に何かエラーがあってもなくても必ず
ensureからend部分が実行されるようになっています。今、ここではensure部分でエクセルのブックを閉じています。またその閉じる際にエラーが起きる場合があるので
ここでも例外処理をしておき、最後にエクセルそのものを閉じています。
この例外処理はとても重要なので、気をつけてください。特にさきほど「xl.Visible = false」でエクセルを不可視にしているので、仮にエクセルを正しく終了できなくても
画面上ではわかりにくくなってしまいます。そうならないように必ず例外処理はおこなってください。
もし、例外処理を忘れて何度か異常終了してしまった場合には、プロセスで確認して不要なエクセルプロセスを削除してください。

エクセルブックそのものの操作は、直感的になっています。ブックの中からシートを取り出しています。そしてシートから「UsedRange」という
書き込んでいるセルの範囲を取得して、その中から1行ずつ取り出しています。で、取り出した行からセルの中身を出力しています。

また、win32oleではエクセルファイルに書き込んだり、エクセルファイルそのものを生成したりもできます。
book.Save
とすればエクセルを保存することができます。

この他にも罫線をことこまかにいじれたり、色々操作できるのですがいくつか問題があります。
まずwin32oleはWindowsAPIをRubyに繋げるためだけのライブラリなので、あまり使い勝手が良いとはいえません。
特にコードからRubyらしさが消えてしまうのはあまりスッキリしません。
さらに、当然なのですが、この方式ではWindows限定になってしまいます。Macでエクセルを扱っている方には向かない方法ですね。
また、Javaでこの方式でエクセルを扱うツールはあまり存在していません。

次に2番目の方法をみていきましょう。この方法はバイナリファイルを解析するツールが必要ですが、それさえあればどのマシンでも動かすことが可能です。
Rubyの場合Rooというツールがあります。(Javaの場合はPOIというツールがこの方法になります）
さっそくRooの使い方を見てみましょう。の前にRooは標準にはついていないライブラリなので、インストールしておく必要があります。
といっても難しくはありません。

gem install roo

とすればOKです。インストールが終わればさっそく使ってみましょう！

require 'roo'
xl = Roo::Excelx.new("money.xlsx")
p xl.cell(1,1)

1行目はrooを読み込んでいます。2行目でエクセルファイルを解析して、2行目で左上のセルの値を出力しています。
さっきと比べると随分あっさりした感じがしますね。比較のために先ほどのwin32oleと同じことをやってみるとこのようになります。

require 'roo'

xl = Roo::Excelx.new("money.xlsx")

xl.sheets.each do |sheet_name|
  xl.default_sheet = sheet_name
  (xl.first_row..xl.last_row).each do |r|
    (xl.first_column..xl.last_column).each do |c|
      p xl.cell(r,c)
    end
  end
end

まず大きくことなるのは例外処理がいらない点です。rooでは実際にエクセルアプリケーションを立上ているわけではないので
アプリケーションのクローズが不要です。また、Roo::Excelx.new("money.xlsx")とした時点ですべての解析を終えているようなで
その後のファイルの処理なども不要です。このため、さっきと比べると随分すっきりした印象を受けます。

そして横んだファイルから、sheetsで全シートの名前の配列を取得できます。
シートの名前を「xl.default_sheet」に設定すると操作するシートを選択できます。
rooにはwin32oleにあった「UsedRange」のような便利なメソッドはないため、どの範囲にデータがあるかを
(xl.first_row..xl.last_row)や(xl.first_column..xl.last_column)で取得しています。
そして、「xl.cell(r,c)」でデータを取得しています。
このcellメソッドには
xl.cell(1,1)
xl.cell(1,"A")
xl.cell("A",1)
というアクセスが可能です。ちなみに数字は配列のように0からではなく、1から始めます。

win32oleに比べれば機能は劣るものの、ややすっきりコードがかけるのが魅力です。
ただし、それでもまだAPIとしては洗練されていないなぁという印象を受けます。
また、rooではエクセルファイルを更新したり、生成したりすることはできません。現在できるのは読み込みのみなので注意してください。

さて、この方式でJavaを扱うにはPOIというツールが最も有名です。
他にもいくつかありますが、開発が止まっていたりして、なかなかPOI以外の選択肢を取りづらい状況です。
ですのでここではPOIを取り上げておきましょう。POIでxlsxファイルを扱うのはPOI以外に
XMLBeansとDOM4Jというライブラリが必要ですので、別途ダウンロードしてください。
さて、POIでxlsxファイルを読み込みには以下のようなコードになります


FileInputStream fi = null;
		try {
			fi= new FileInputStream("money.xlsx");
			XSSFWorkbook book = new XSSFWorkbook(fi);
			
			for (Sheet sheet : book) {
				boolean header = true;
				for (Row row : sheet) {
					if (header) {
						header = false;
						continue;
					}
					System.out.print(row.getCell(0).getDateCellValue() + " ");
					System.out.print(row.getCell(1).getStringCellValue() + " ");
					System.out.print(row.getCell(2).getNumericCellValue() + " ");
					System.out.println("");
				}
			}
		} catch (IOException e) {
		}finally{
			try {
				if(fi!=null)
					fi.close();
			} catch (IOException e) {
			}
		}


POIでxlsxを扱うにはXSSFWorkbookを newします。bookオブジェクトを作り、最初のforで全シートを巡回します。
また、同様にsheet中の全行を巡回します。ここで1行目とそれ以降の行の扱いがまったくことなるので1行目を無視して処理を行っています。
行データをrow変数に格納して、またこれまでと同様に拡張for文で巡回することも可能ですが
ここでは列の番号を指定してアクセスしています。
データを取得する際にデータのフォーマットによってアクセス方法を変える必要があります。
getDateCellValueは日付として取得します。getStringCellValueは文字列のまま、そしてgetNumericCellValueは数値として取得します。
row.getCell(0).getCellType()からセルデータのフォーマットを取得することができるので、
そのタイプからどのようにデータを取得するかを判断することも可能です。

ちなみにxlsxファイルはXSSFWorkbookクラスですが、xlsファイルはHSSFWorkbookクラスで扱うため少し方式が変わります。



エクセルを処理する3番目の方法も見てみましょう。
これには大きく分けて2つの方法があります。まず1つ目はエクセルの機能を利用してテキストファイルにしてしまう方法です。
エクセルの名前をつけて保存を選択するとエクセル形式以外にCSV形式などが選択できます。この手順で一旦CSVにしてしまえば最初に紹介したCSVの方法が使えます。
win32oleもrooも使えない状況であれば、こういう方法もよいかもしれません。
ただ、これでは多くのファイルを扱う際にとても不便です。一々エクセルを開いて作業するのは大変ですね。

そこで次の方法は、xmlで処理する方法です。実はエクセルのxlsx形式は、内部的にはxmlファイルの集合になっています。
例えばさきほどから扱っているmoney.xlsxをコピーして別ファイルを作り、名前を「money.zip」にしてみます。
そして、そのzipファイルを解凍してみると、なんと様々なXMLファイルが解凍されました！
色々なファイルがありますが、データ入っているのはxl/worksheets/sheet1.xmlのようなファイルです。XMLファイルはただのテキストファイルなのでメモ帳で中身を確認できます。
タグの情報が分かりにくいですがvタグの中に値が記述されています。
ただし、日本語などの文字列はxl/sharedStrings.xmlに記載されていて、sheet1.xmlにはその番号しか振られていません。
また日付は「9/1」ではなく、41518のように表現されています。
これらはvタグの上のcタグのt属性を見ればどのように読めば良いかが分かるようになっています。
とはいえ、少し複雑ですね。
ここでは紹介しませんが、XMLを解析するツールはrubyに標準で入っているので、あまり難しくはありません。
データしか入っていないファイルならば、比較的簡単にXMLでも読み込めます。




（囲み記事）
このようなファイル操作を行う際に地味ながら便利なRubyの機能を紹介しておきます。
まずはディレクトリ内をくまなく探してファイルを見つけてくれる機能です。
例えば
money/kanri/top.xlsx
money/kanri/2013/9.xlsx
money/zeikin.xlsx

のように3つのエクセルファイルがあったとします。
これら3つのファイルを同時に扱いたい場合、いちいち手でファイルへのパスをプログラムに書くのは面倒ですね。
そんなときに
Dirのglobというメソッドが使えます。このメソッドはパターンにマッチする名前のファイルを全て見つけてくれます。
この場合
Dir.glob("money/**/*.xlsx")
とするだけで、moneyディレクトリ以下を自動で探っていってxlsxファイルを見つけてくれます。
*はワイルドカードの意味です。「*.xlsx」とすると、なんらかの名前のファイルで拡張子がxlsxという名前のファイルという意味になります。
また「**」は、あってもなくても良いという意味になるので
「money/**/」はmoney以下のディレクトリ直下かさらにもっとしたのディレクトリなのかというのを表します。

Javaでも同様のことができますが、少し複雑です。
Javaでは、Java7から導入された機能の Files.newDirectoryStreamを使うのが便利です。Java7に移行していない方の場合は
FileクラスのlistFilesなどを使って自分で探すコードを書くことになります。
これには再帰処理を利用することになるので、慣れていないと少し複雑です。
こういう便利機能はJavaよりはRubyのほうが充実しているように感じます。
（囲み記事：終）


（囲み記事）
Javaでファイルを扱うには、Java7以上では簡単な機能（Files.readAllLines）が提供されていたり、
ファイルを安全に閉じるための機能が提供されていますが、Java7がない状態ではやや面倒な処理になります。
ここでは古式ゆかしいファイル操作方法を簡単に紹介しておきましょう。
Rubyではファイル操作の始まりはopenメソッドからですが、Javaにはopenという名前のメソッドなどはありません。
処理するファイルを扱うクラスをnewすると同時にopenされる仕組みになっています。
このため、読み取りモードで開くのか、書き込みモードで開くのかはnewするクラスを変えることで対応します。
RubyのCSV操作のコードと同じようなことをしてみましょう。

BufferedReader reader = null;
try{
	 reader = new BufferedReader(new FileReader("money.csv"));
	 String line=null;
	 while((line = reader.readLine()) != null){
		 System.out.println(line.split(",")[0]);
	 }
}catch(IOException e){
}finaly {
	 try{
	 	if(reader!=null)
			 reader.close();
	}catch (IOException e) {
	}
}

Javaのファイル処理をややこしくしている理由の一つが例外処理です。コードでいうとtry catch/finaly の部分です。
BufferedReader を new している行でファイルを開いています。この開くときと閉じるときに例外が発生する可能性があるので例外処理を行っています。
ちなみにJava7ではこの例外処理単純に書くことが可能になっています。

 try(BufferedReader reader = new BufferedReader(new FileReader("money.csv"))){
   //...
 }catch(IOException e){
 }

のように書くとファイルのクローズを自動でやってくれます。

また、Javaのファイル操作でややこしいのがどのクラスを利用するかです。このサンプルコードですら、2つのFile系のクラスが登場しています。
BufferedReaderとFileReaderを利用しています。他にも多くのクラスが提供されていて、どれを使うのかをいちいち考えないといけないのも面倒に感じます。

さて、一応ファイルを開いたあとの処理もみていきましょう。readLineメソッドで一行ずつ読み込んでいます。
そして、読み込んだ文字列をRubyと同じようにカンマで単純に切って最初の要素を出力しています。
（囲み記事：終）



